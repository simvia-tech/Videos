# The files within salome_meca

## The dump file

In the file tab of salome_meca, you can generate the dump file by clicking on "Dump study" (you can also press `ctrl + D`). This is a python file listing everything that was done in the salome interface. You can see there the operations and parameters defined in the shaper module for instance. In the documentation (cf help tab in salome), you can not only find details on all of the buttons and tools of salome_meca, but also their syntax for the dump study file (cf `[1:34s]`). 

Asterstudy is the only empty module of salome_meca in the dump file (`[1:47s]`). This is because AsterStudy generates its own files to run and execute code aster.



## The AsterStudy files

To run a study with code aster, AsterStudy generates two files: the export and the command file. The command file summarize all of the operation Code_Aster must run, and the export file compile Code_Aster, and indicate how much memory to allocate to the run, where to find the command and mesh files, external ressources...

### The command file .comm

Open the AsterStudy interface. Right click on the Stage_1 item under CurrentCase in the Data Settings pannel, and select "Text Mode". This will display the exact equivalent of everything that was performed through the interface of AsterStudy in the first video, but in a python code with functions and commands that can be understood by Code_Aster. You can save and extract from salome_meca the command file (.comm extension) by right clicking on Stage_1 and clicking on export command file. The .comm file starts with DEBUT() (starts in french) and ends with FIN() and will contain in between the same content as what was in "Text mode".


### The export file .export

You can save the export file by right clicking on the CurrentCase item in the Data Settings of AsterStudy and selecting "export case" (you can also do this in the History view like in the video, `[2:25s]`). If you open the expot file after saving it, you can see several line telling code aster to run with a specific memory limit, number of CPU, or more importantly the .comm file and the .med (mesh) file.


## The mesh file .med

In the mesh module, right click on the Mesh_1 item in the object browser `[2:55s]`. Go on "export" and select MED file. There you can save it independently.


# Importing the files


## The .hdf file

This file is saving the details of the Code_Aster computation and its dependencies (including the .med mesh file). In Salome_meca, you can generate a .hdf when you are saving a project. You can open the .hdf file to open a salome_meca study.


## Importing the dump file

You can import the dump file by going into the file tab and selecting "import script". Similarly to the .hdf files, the information in the python dump file only include what was done in a salome_meca study and can be imported to regenerate every steps done in a project. The main difference with the .hdf file is that the commands have to be recompiled. So the dump file is useful to transfer heavy studies in a very light, text format, but the .hdf file should be prefered if the main goal is to open the salome_meca study quickly. It is of course possible to change some of the actions done in the dump file before importing it. 

## Importing the .med mesh file

If you are already in possession of the mesh of a previous study, and the .dump file have been transfered to you, it's useful to delete the commands in the mesh module of the dump file and simply import it directly. You can do it by going into the mesh module, right clicking on the Object Browser and selecting import. Note the .med file will already be generated if the .hdf file is opened. 


## Importing the Aster command .comm file

In the AsterStudy module, you can import all the command file by right clicking on CurrentCase in the Data Settings tab and selecting "Add Stage from file". All of the commands will be generated but the names and saving directory of inputs and outputs files have to be redefine  `[6:25s]`. The export file will be regenerated automatically with salome_meca when running the study.


# code_aster from the bash

## Customize the computation ressources in the .export file

Given a .export and a .comm files, you can directly call Code_Aster without using Salome_Meca. This approach gives a better control on how the computation is done with Code_Aster as the .export file can be customized. It is also completely possible to do the geometry, mesh and comm file with salome_meca and then extract the files and run Code_Aster directly in the console.

The customization in depth of the .export file will be the object of additionnal video. We give here a very rudimental description of how to edit it.

Each line of the .export file starts with a P to define a parameter or a F for a file (to read, to generate ...). To read a file, you usually use the line `F libr [name_file] D/R [unite]`: libr means you are using a file, D/R depends if it's a data or a result, and the unit is an integer that identifies the file within the code. So for instance, to tell Code_Aster where is the mesh in the LIRE_MAILLAGE (read mesh) instruction of the .comm file, you need to make sure to use F libr [mesh.med] D 40 and put 40 as the unit within the LIRE_MAILLAGE command.

The export file is the one that attributes the ressources, including giving to code_aster the command file to run the computation. It is done with the line `F comm [command_file_name.comm] D 1`. The unit of the .comm file must always be set to 1.

The result file can be defined by using `F rmed [name] R [unit]`. The logs (outputs from code_aster during the compilation) can be define with `F mess [name] R [unit]`.

The parameter ncpus (line `P ncpus x`) defines how many cpus are going to be used by some of the linear solvers (for instance MUMPS) of Code_Aster for an OpenMP parallelization. This option can accelerate the SOLVER command if you increase the number of cpu. Similarly, parameters mpi_nbcpu and mpi_nbnoeud allows to define cpu and nodes for MPI parallelization (used by the parallel version of Code_Aster).


## Call Code_Aster directly from the shell

Once you have an export file properly set up, you can compile code_aster by opening a singularity shell with the command in the Ubuntu bash:

    Singularity run [name_of_the_salome_sif_file] shell

This will open salome_meca, but without displaying the GUI. The lines of the shell should start with Singularity>

Once in this shell, simply type 

    run_aster [name_of_export_file]

to call Code_Aster to run the study. Note if you haven't defined a log file in the export file using `F mess`, you can also ask to generate a log file directly by typing:

    run_aster [name_of_export_file] > [name_of_log_file]
